// Generated by gencpp from file sim_uav/land_arucoRequest.msg
// DO NOT EDIT!


#ifndef SIM_UAV_MESSAGE_LAND_ARUCOREQUEST_H
#define SIM_UAV_MESSAGE_LAND_ARUCOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sim_uav
{
template <class ContainerAllocator>
struct land_arucoRequest_
{
  typedef land_arucoRequest_<ContainerAllocator> Type;

  land_arucoRequest_()
    : timeOut(0.0)  {
    }
  land_arucoRequest_(const ContainerAllocator& _alloc)
    : timeOut(0.0)  {
  (void)_alloc;
    }



   typedef double _timeOut_type;
  _timeOut_type timeOut;





  typedef boost::shared_ptr< ::sim_uav::land_arucoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sim_uav::land_arucoRequest_<ContainerAllocator> const> ConstPtr;

}; // struct land_arucoRequest_

typedef ::sim_uav::land_arucoRequest_<std::allocator<void> > land_arucoRequest;

typedef boost::shared_ptr< ::sim_uav::land_arucoRequest > land_arucoRequestPtr;
typedef boost::shared_ptr< ::sim_uav::land_arucoRequest const> land_arucoRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sim_uav::land_arucoRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sim_uav::land_arucoRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sim_uav::land_arucoRequest_<ContainerAllocator1> & lhs, const ::sim_uav::land_arucoRequest_<ContainerAllocator2> & rhs)
{
  return lhs.timeOut == rhs.timeOut;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sim_uav::land_arucoRequest_<ContainerAllocator1> & lhs, const ::sim_uav::land_arucoRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sim_uav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sim_uav::land_arucoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sim_uav::land_arucoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sim_uav::land_arucoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sim_uav::land_arucoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sim_uav::land_arucoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sim_uav::land_arucoRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sim_uav::land_arucoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a7a138008fb2d0c41d90d6ef0f7caaf3";
  }

  static const char* value(const ::sim_uav::land_arucoRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa7a138008fb2d0c4ULL;
  static const uint64_t static_value2 = 0x1d90d6ef0f7caaf3ULL;
};

template<class ContainerAllocator>
struct DataType< ::sim_uav::land_arucoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sim_uav/land_arucoRequest";
  }

  static const char* value(const ::sim_uav::land_arucoRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sim_uav::land_arucoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timeOut\n"
;
  }

  static const char* value(const ::sim_uav::land_arucoRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sim_uav::land_arucoRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timeOut);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct land_arucoRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sim_uav::land_arucoRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sim_uav::land_arucoRequest_<ContainerAllocator>& v)
  {
    s << indent << "timeOut: ";
    Printer<double>::stream(s, indent + "  ", v.timeOut);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIM_UAV_MESSAGE_LAND_ARUCOREQUEST_H
